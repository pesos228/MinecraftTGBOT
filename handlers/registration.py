import logging
from aiogram import Bot, types
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from api_requests import get_player_by_tg_id, register_player
from keyboards import change_nickname_keyboard
from states import Registration
from .menu import show_main_menu


async def cmd_start(message: types.Message, state: FSMContext, bot: Bot):
    user_id = message.from_user.id

    try:
        player_data = await get_player_by_tg_id(user_id)
        if player_data is not None:
            keyboard = change_nickname_keyboard()
            await message.answer('–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –•–æ—á–µ—à—å —Å–º–µ–Ω–∏—Ç—å –Ω–∏–∫?', reply_markup=keyboard)
        else:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=FSInputFile('public/registration_image.png'),
                caption="üöÄ *–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –í–ª–∞–¥–∏–∫–∞!* üöÄ\n\n–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                parse_mode="Markdown"
            )
            await state.set_state(Registration.WATING_NAME)
    except Exception as e:
        logging.error(f"HTTP request failed: {e}")
        await message.answer("–ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ")


async def process_name(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    user_name = message.text
    try:
        logging.info(f"Attempting to register user {user_id} with name {user_name}")
        await register_player(user_id, user_name)
        logging.info(f"User {user_id} successfully registered")

        logging.info(f"Sending success message to user {user_id}")
        await message.answer(f"–°–ø–∞—Å–∏–±–æ, {user_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

        await show_main_menu(message)

        logging.info(f"Registration process completed for user {user_id}")
    except Exception as e:
        logging.error(f"Error during registration process for user {user_id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()
